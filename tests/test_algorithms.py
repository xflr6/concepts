from concepts import algorithms


def test_lattice(context):
    pairs = [f'{x._extent.bits()} <-> {x._intent.bits()}'
             for x in context.lattice]

    assert pairs == ['000000 <-> 1111111111',
                     '100000 <-> 1001011001',
                     '010000 <-> 1001010110',
                     '001000 <-> 0110011001',
                     '000100 <-> 0110010110',
                     '000010 <-> 0101101001',
                     '000001 <-> 0101100110',
                     '110000 <-> 1001010000',
                     '101000 <-> 0000011001',
                     '100010 <-> 0001001001',
                     '010100 <-> 0000010110',
                     '010001 <-> 0001000110',
                     '001100 <-> 0110010000',
                     '001010 <-> 0100001001',
                     '000101 <-> 0100000110',
                     '000011 <-> 0101100000',
                     '101010 <-> 0000001001',
                     '010101 <-> 0000000110',
                     '111100 <-> 0000010000',
                     '110011 <-> 0001000000',
                     '001111 <-> 0100000000',
                     '111111 <-> 0000000000']


def test_lattice(context):
    concepts = list(algorithms.fcbo(context))

    pairs = [f'{extent.bits()} <-> {intent.bits()}'
             for extent, intent in concepts]

    assert pairs == ['000000 <-> 1111111111',
                     '100000 <-> 1001011001',
                     '010000 <-> 1001010110',
                     '001000 <-> 0110011001',
                     '000100 <-> 0110010110',
                     '000010 <-> 0101101001',
                     '000001 <-> 0101100110',
                     '110000 <-> 1001010000',
                     '101000 <-> 0000011001',
                     '100010 <-> 0001001001',
                     '010100 <-> 0000010110',
                     '010001 <-> 0001000110',
                     '001100 <-> 0110010000',
                     '001010 <-> 0100001001',
                     '000101 <-> 0100000110',
                     '000011 <-> 0101100000',
                     '111100 <-> 0000010000',
                     '110011 <-> 0001000000',
                     '101010 <-> 0000001001',
                     '010101 <-> 0000000110',
                     '001111 <-> 0100000000',
                     '111111 <-> 0000000000']
